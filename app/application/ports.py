from __future__ import annotations
from typing import Protocol, Iterable
from app.domain.entities import Incident, Binding
from app.domain.snapshots import IncidentSnapshot
from app.domain.value_objects import IncidentKey
from app.domain.events import MirrorCommand


class IncidentRepository(Protocol):
    def get(self, key: IncidentKey) -> Incident | None: ...
    def upsert(self, inc: Incident) -> None: ...

class BindingRepository(Protocol):
    def targets_for(self, incident_key: IncidentKey) -> Iterable[Binding]: ...
    def upsert(self, b: Binding) -> None: ...

class IdempotencyStore(Protocol):
    def seen(self, key: str) -> bool: ...
    def mark(self, key: str) -> None: ...

class OutboxPort(Protocol):
    def enqueue(self, commands: list[MirrorCommand]) -> None: ...

class SnapshotRepository(Protocol):
    def get(self, key: str) -> tuple[IncidentSnapshot | None, str | None]: ...
    def upsert(self, snap: IncidentSnapshot, fingerprint: str) -> None: ...